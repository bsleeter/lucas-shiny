h4("Brushed points"),
tableOutput("plot_brushedpoints")
),
column(width = 4,
verbatimTextOutput("plot_clickinfo"),
verbatimTextOutput("plot_hoverinfo")
),
column(width = 4,
wellPanel(actionButton("newplot", "New plot")),
verbatimTextOutput("plot_brushinfo")
)
)
),
server = function(input, output, session) {
data <- reactive({
input$newplot
# Add a little noise to the cars data so the points move
cars + rnorm(nrow(cars))
})
output$plot <- renderPlot({
d <- data()
plot(d$speed, d$dist)
})
output$plot_clickinfo <- renderPrint({
cat("Click:\n")
str(input$plot_click)
})
output$plot_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$plot_hover)
})
output$plot_brushinfo <- renderPrint({
cat("Brush (debounced):\n")
str(input$plot_brush)
})
output$plot_clickedpoints <- renderTable({
# For base graphics, we need to specify columns, though for ggplot2,
# it's usually not necessary.
res <- nearPoints(data(), input$plot_click, "speed", "dist")
if (nrow(res) == 0)
return()
res
})
output$plot_brushedpoints <- renderTable({
res <- brushedPoints(data(), input$plot_brush, "speed", "dist")
if (nrow(res) == 0)
return()
res
})
}
)
# Demo of clicking, hovering, brushing with imageOutput
# Note that coordinates are in pixels
shinyApp(
ui = basicPage(
fluidRow(
column(width = 4,
imageOutput("image", height=300,
click = "image_click",
hover = hoverOpts(
id = "image_hover",
delay = 500,
delayType = "throttle"
),
brush = brushOpts(id = "image_brush")
)
),
column(width = 4,
verbatimTextOutput("image_clickinfo"),
verbatimTextOutput("image_hoverinfo")
),
column(width = 4,
wellPanel(actionButton("newimage", "New image")),
verbatimTextOutput("image_brushinfo")
)
)
),
server = function(input, output, session) {
output$image <- renderImage({
input$newimage
# Get width and height of image output
width  <- session$clientData$output_image_width
height <- session$clientData$output_image_height
# Write to a temporary PNG file
outfile <- tempfile(fileext = ".png")
png(outfile, width=width, height=height)
plot(rnorm(200), rnorm(200))
dev.off()
# Return a list containing information about the image
list(
src = outfile,
contentType = "image/png",
width = width,
height = height,
alt = "This is alternate text"
)
})
output$image_clickinfo <- renderPrint({
cat("Click:\n")
str(input$image_click)
})
output$image_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$image_hover)
})
output$image_brushinfo <- renderPrint({
cat("Brush (debounced):\n")
str(input$image_brush)
})
}
)
}
runApp()
shinyApp(ui = ui, server = server)
ui <- fluidPage(
tags$head(tags$style('
#my_tooltip {
position: absolute;
width: 300px;
z-index: 100;
padding: 0;
}
')),
tags$script('
$(document).ready(function() {
// id of the plot
$("#distPlot").mousemove(function(e) {
// ID of uiOutput
$("#my_tooltip").show();
$("#my_tooltip").css({
top: (e.pageY + 5) + "px",
left: (e.pageX + 5) + "px"
});
});
});
'),
selectInput("var_y", "Y-Axis", choices = names(iris)),
plotOutput("distPlot", hover = "plot_hover", hoverDelay = 0),
uiOutput("my_tooltip")
)
ui <- fluidPage(
tags$head(tags$style('
#my_tooltip {
position: absolute;
width: 300px;
z-index: 100;
padding: 0;
}
')),
tags$script('
$(document).ready(function() {
// id of the plot
$("#distPlot").mousemove(function(e) {
// ID of uiOutput
$("#my_tooltip").show();
$("#my_tooltip").css({
top: (e.pageY + 5) + "px",
left: (e.pageX + 5) + "px"
});
});
});
'),
selectInput("var_y", "Y-Axis", choices = names(iris)),
plotOutput("distPlot", hover = "plot_hover"),
uiOutput("my_tooltip")
)
server <- function(input, output) {
output$distPlot <- renderPlot({
req(input$var_y)
ggplot(iris, aes_string("Sepal.Width", input$var_y)) +
geom_point()
})
output$my_tooltip <- renderUI({
hover <- input$plot_hover
y <- nearPoints(iris, input$plot_hover)[input$var_y]
req(nrow(y) != 0)
verbatimTextOutput("vals")
})
output$vals <- renderPrint({
hover <- input$plot_hover
y <- nearPoints(iris, input$plot_hover)[input$var_y]
req(nrow(y) != 0)
y
})
}
shinyApp(ui = ui, server = server)
runApp()
devtools::install_github("Roche/ggtips")
install.packages("devtools")
devtools::install_github("Roche/ggtips")
runApp()
install.packages("shinyBS")
library(shinyBS)
bsExample("Tooltips_and_Popovers")
runApp()
bsExample("Tooltips_and_Popovers")
runApp()
bsExample("Tooltips_and_Popovers")
? addPopover
library(shinyBS)
? shinyBS
install.packages("ellipsis")
shiny::runApp()
runApp()
runApp()
? addPopover
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("ggiraph")
runApp()
runApp()
install.packages("shinydashboard")
# Define UI for application that draws a histogram
ui = fluidPage(theme="common.css",
includeHTML("www/header.html"),
navbarPage(title="California Carbon Scenarios", theme = shinytheme("simplex"),
tabPanel("Carbon Stocks",value = "Carbon Stocks Projected Carbon Storage in California", icon=icon("bar-chart-o"),
sidebarLayout(
sidebarPanel(h3("Carbon Stocks"),
selectInput("ecoregion", label=h4("Region"), choices=unique(stocks$EcoregionName), selected="State"),
selectInput("stockGroup",label=h4("Carbon Stock"), choices=unique(stocks$StockGroup),selected="TEC"),
selectInput("luc", label=h4("Land Use Scenario"), choices=unique(stocks$LUC), selected="BAU"),
checkboxGroupInput("rcp", label=h4("Climate Scenario"),choiceValues=unique(stocks$RCP),choiceNames=c("Low Emissions (RCP 4.5)", "High Emissions (RCP 8.5)"), selected="rcp45"),
checkboxGroupInput("gcm",label=h4("Climate Model"),choiceValues=unique(stocks$GCM),choiceNames=c("Average (CanESM2)","Warm-Wet (CNRM-CM5)", "Hot-Dry (HadGEM2-ES)", "Complement (MIROC5)"), selected="CanESM2"),
sliderInput("years", label=h4("Year Range"), min=2001, max=2100, value=c(2001,2100), sep="", width="100%"),
checkboxInput("ci1", "Toggle 95% Confidence Intervals", value=TRUE)
),
tabBox
# Plot 1
mainPanel(style = "width:100%;",
plotOutput("stocksPlot1", height="400"),
plotOutput("stocksPlot2", height="600")
),
)
),
tabPanel("Net Carbon Fluxes", value="Net Carbon Fluxes", icon=icon("calendar"),
sidebarLayout(
sidebarPanel(h3("Carbon Fluxes"),
selectInput("ecoregion2", label=h4("Region"), choices=unique(netFlux$EcoregionName), selected="State"),
selectInput("netFlux",label=h4("Net Flux"), choices=unique(netFlux$Flux),selected="NECB"),
selectInput("luc2", label=h4("Land Use Scenario"), choices=unique(netFlux$LUC), selected="BAU"),
checkboxGroupInput("rcp2", label=h4("Climate Scenario"),choiceValues=unique(netFlux$RCP),choiceNames=c("Low Emissions (RCP 4.5)", "High Emissions (RCP 8.5)"), selected="rcp45"),
checkboxGroupInput("gcm2",label=h4("Climate Model"),choiceValues=unique(netFlux$GCM),choiceNames=c("Average (CanESM2)","Warm-Wet (CNRM-CM5)", "Hot-Dry (HadGEM2-ES)", "Complement (MIROC5)"), selected="CanESM2"),
sliderInput("years2", label=h4("Year Range"), min=2001, max=2100, value=c(2001,2100), sep="", width="100%"),
checkboxInput("smooth", "Add trend line", value=FALSE),
checkboxInput("ci", "Add 95% Confidence Intervals", value=FALSE),
checkboxInput("annual", "Add Annual Projections", value=FALSE)
),
# Plot Area
mainPanel(
plotOutput("fluxplot1", height="400"),
plotOutput("fluxplot2", height="400")
)
)
)
),
includeHTML("www/footer.html")
)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(extrafont)
library(shiny)
library(shinythemes)
library(dplyr)
library(ggplot2)
library(readr)
library(hrbrthemes)
library(zoo)
library(ggiraph)
library(shinyda)
loadfonts()
# Process Carbon Stock Data
stocksEco = read_csv("data/ecoregion_stocks_by_scenario_timestep_95ci.csv") %>% filter(Ecosystem=="Yes")
stocksEcoTEC = stocksEco %>% group_by(LUC,GCM,RCP,Timestep, EcoregionID, EcoregionName, Ecosystem) %>% summarise(Mean=sum(Mean), Lower=sum(Lower), Upper=sum(Upper)) %>%
mutate(StockGroup="TEC")
stocksState = read_csv("data/state_stocks_by_scenario_timestep_95ci.csv") %>% filter(Ecosystem=="Yes") %>%
mutate(EcoregionID=0, EcoregionName="State")
stocksStateTEC = stocksState %>% group_by(LUC,GCM,RCP,Timestep, EcoregionID, EcoregionName, Ecosystem) %>% summarise(Mean=sum(Mean), Lower=sum(Lower), Upper=sum(Upper)) %>%
mutate(StockGroup="TEC")
stocks = bind_rows(stocksEco, stocksState, stocksEcoTEC, stocksStateTEC)
# Process Net Flux List
fluxEco = read_csv("data/ecoregion_netflux_by_scenario_timestep_95ci.csv")
netFluxEco = fluxEco %>% filter(Flux %in% c("NPP","Rh","NEP","NECB"))
fluxState = read_csv("data/state_netflux_by_scenario_timestep_95ci.csv")
netFluxState = fluxState %>% filter(Flux %in% c("NPP","Rh","NEP","NECB")) %>% mutate(EcoregionID=0, EcoregionName="State")
netFlux = bind_rows(netFluxEco, netFluxState)
unique(netFluxState$Flux)
ecoList = unique(stocks$EcoregionName)
lucList = unique(stocks$LUC)
stockList = unique(stocks$StockGroup)
# Define UI for application that draws a histogram
ui = fluidPage(theme="common.css",
includeHTML("www/header.html"),
navbarPage(title="California Carbon Scenarios", theme = shinytheme("simplex"),
tabPanel("Carbon Stocks",value = "Carbon Stocks Projected Carbon Storage in California", icon=icon("bar-chart-o"),
sidebarLayout(
sidebarPanel(h3("Carbon Stocks"),
selectInput("ecoregion", label=h4("Region"), choices=unique(stocks$EcoregionName), selected="State"),
selectInput("stockGroup",label=h4("Carbon Stock"), choices=unique(stocks$StockGroup),selected="TEC"),
selectInput("luc", label=h4("Land Use Scenario"), choices=unique(stocks$LUC), selected="BAU"),
checkboxGroupInput("rcp", label=h4("Climate Scenario"),choiceValues=unique(stocks$RCP),choiceNames=c("Low Emissions (RCP 4.5)", "High Emissions (RCP 8.5)"), selected="rcp45"),
checkboxGroupInput("gcm",label=h4("Climate Model"),choiceValues=unique(stocks$GCM),choiceNames=c("Average (CanESM2)","Warm-Wet (CNRM-CM5)", "Hot-Dry (HadGEM2-ES)", "Complement (MIROC5)"), selected="CanESM2"),
sliderInput("years", label=h4("Year Range"), min=2001, max=2100, value=c(2001,2100), sep="", width="100%"),
checkboxInput("ci1", "Toggle 95% Confidence Intervals", value=TRUE)
),
tabBox
# Plot 1
mainPanel(style = "width:100%;",
plotOutput("stocksPlot1", height="400"),
plotOutput("stocksPlot2", height="600")
),
)
),
tabPanel("Net Carbon Fluxes", value="Net Carbon Fluxes", icon=icon("calendar"),
sidebarLayout(
sidebarPanel(h3("Carbon Fluxes"),
selectInput("ecoregion2", label=h4("Region"), choices=unique(netFlux$EcoregionName), selected="State"),
selectInput("netFlux",label=h4("Net Flux"), choices=unique(netFlux$Flux),selected="NECB"),
selectInput("luc2", label=h4("Land Use Scenario"), choices=unique(netFlux$LUC), selected="BAU"),
checkboxGroupInput("rcp2", label=h4("Climate Scenario"),choiceValues=unique(netFlux$RCP),choiceNames=c("Low Emissions (RCP 4.5)", "High Emissions (RCP 8.5)"), selected="rcp45"),
checkboxGroupInput("gcm2",label=h4("Climate Model"),choiceValues=unique(netFlux$GCM),choiceNames=c("Average (CanESM2)","Warm-Wet (CNRM-CM5)", "Hot-Dry (HadGEM2-ES)", "Complement (MIROC5)"), selected="CanESM2"),
sliderInput("years2", label=h4("Year Range"), min=2001, max=2100, value=c(2001,2100), sep="", width="100%"),
checkboxInput("smooth", "Add trend line", value=FALSE),
checkboxInput("ci", "Add 95% Confidence Intervals", value=FALSE),
checkboxInput("annual", "Add Annual Projections", value=FALSE)
),
# Plot Area
mainPanel(
plotOutput("fluxplot1", height="400"),
plotOutput("fluxplot2", height="400")
)
)
)
),
includeHTML("www/footer.html")
)
server = (function(input, output) {
# Carbon Stocks Page
selectData1 = reactive({
stocks %>% filter(Ecosystem=="Yes", LUC %in% input$luc, GCM %in% input$gcm, RCP %in% input$rcp, EcoregionName==input$ecoregion, StockGroup==input$stockGroup) %>%
filter(Timestep>=input$years[1], Timestep<=input$years[2])
})
output$stocksPlot1 <-  renderPlot({
p1 = ggplot(data=selectData1(), aes(x=Timestep, y=Mean/1000, fill=GCM, color=GCM)) +
geom_line() +
geom_point() +
scale_fill_ipsum() +
scale_color_ipsum() +
facet_wrap(RCP~LUC) +
theme_ipsum_rc(14, grid="Y") +
labs(x="Year", y="Million Metric Tons of Carbon", title="Total Ecosystem Carbon Storage by Scenario", subtitle="Total carbon stored in Live, Dead, and Soil pools") +
theme(legend.position = "top", plot.margin=margin(5,5,5,5))
if(input$ci1)
p1 = p1 + geom_ribbon(aes(ymin=Lower/1000, ymax=Upper/1000), alpha=0.5, color=NA)
p1
})
selectData2 = reactive({
stocks %>% filter(Ecosystem=="Yes", LUC %in% input$luc, GCM %in% input$gcm,  RCP %in% input$rcp, EcoregionName==input$ecoregion) %>%
filter(Timestep==input$years[1] | Timestep==input$years[2]) %>% group_by(LUC,GCM,RCP,EcoregionName,StockGroup) %>% mutate(MeanChange=Mean-lag(Mean), LowerChange=Lower-lag(Lower), UpperChange=Upper-lag(Upper))
})
output$stocksPlot2 <- renderPlot({
p2 = ggplot(data=selectData2(), aes(x=StockGroup, y=MeanChange/1000, fill=StockGroup, color=StockGroup)) +
geom_bar(stat="identity") +
scale_fill_ipsum() +
scale_color_ipsum() +
facet_grid(GCM~RCP) +
theme_ipsum_rc(14, grid="Y") +
labs(x="Year", y="Million Metric Tons of Carbon", title="Average Projected Ecosystem Carbon Storage by Carbon Pool", subtitle="Living biomass (Live), dead organic matter (DOM), and soil organic carbon (SOC) storage") +
theme(legend.position = "top", plot.margin=margin(30,5,5,5))
if(input$ci1)
p2 = p2 + geom_errorbar(aes(ymin=LowerChange/1000, ymax=UpperChange/1000), color="black", width=0.5)
p2
})
# Carbon Flux Page
selectData3 = reactive({
netFlux %>% filter(LUC %in% input$luc2, GCM %in% input$gcm2, RCP %in% input$rcp2, EcoregionName==input$ecoregion2, Flux==input$netFlux) %>%
filter(Timestep>=input$years2[1], Timestep<=input$years2[2]) %>%
mutate(Mean10=rollmean(Mean, 10, fill=NA, align=c("center")), Lower10=rollmean(Lower, 10, fill=NA, align=c("center")), Upper10=rollmean(Upper, 10, fill=NA, align=c("center")))
})
output$fluxplot1 <- renderPlot({
p = ggplot(data=selectData3(), aes(x=Timestep, y=Mean10, fill=GCM, color=GCM)) +
geom_line(size=1) +
geom_hline(yintercept=0, color="black", size=0.5) +
scale_fill_ipsum() +
scale_color_ipsum() +
facet_wrap(RCP~LUC) +
theme_ipsum_rc(20, grid="Y") +
labs(x="Year", y="Million Metric Tons of Carbon", title="Net Ecosystem Carbon Flux by Scenario", subtitle="Rolling annual 10-year average net carbon fluxes by scenario") +
theme(legend.position = "top", plot.margin=margin(5,5,5,5))
if(input$smooth)
p = p + geom_smooth(method="lm", se=FALSE)
if(input$ci)
p = p + geom_ribbon(aes(ymin=Lower10, ymax=Upper10), alpha=0.5, color=NA)
if(input$annual)
p = p + geom_line(data=selectData3(), aes(x=Timestep, y=Mean), alpha=0.2)
p
})
selectData4 = reactive({
netFlux %>% filter(LUC %in% input$luc2, GCM %in% input$gcm2, RCP %in% input$rcp2, EcoregionName==input$ecoregion2, Flux=="NECB") %>%
filter(Timestep>=input$years2[1], Timestep<=input$years2[2]) %>% group_by(LUC,GCM,RCP,EcoregionName,Flux) %>% summarise(Mean=sum(Mean), Lower=sum(Lower), Upper=sum(Upper))
})
output$fluxplot2 <- renderPlot({
p4 = ggplot(data=selectData4(), aes(x=GCM, y=Mean, fill=GCM, color=GCM)) +
geom_bar(stat="identity") +
geom_hline(yintercept=0) +
scale_fill_ipsum() +
scale_color_ipsum() +
facet_wrap(RCP~LUC) +
theme_ipsum_rc(20, grid="Y") +
labs(y="Million Metric Tons of Carbon", title="Net Ecosystem Carbon Balance (NECB) by Scenario", subtitle="Rolling annual 10-year average net carbon fluxes by scenario") +
theme(legend.position = "top", plot.margin=margin(5,5,5,5))
if(input$ci)
p4 = p4 + geom_errorbar(aes(ymin=Lower, ymax=Upper), alpha=0.5, color="black", width=0.5)
p4
})
})
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp('dashboard')
runApp('dashboard/dashboard.R')
runApp('dashboard/dashboard.R')
? taskItem
runApp('dashboard/dashboard.R')
runApp('dashboard/dashboard.R')
? taskItem
runApp('dashboard/dashboard.R')
? badgeStatus
runApp('dashboard/dashboard.R')
install.packages("shinydashboardPlus")
runApp('dashboard/dashboard.R')
? box
runApp('dashboard/dashboard.R')
? box
runApp('dashboard/dashboard.R')
runApp('dashboard/dashboard.R')
stocksEco = read_csv("data/ecoregion_stocks_by_scenario_timestep_95ci.csv") %>% filter(Ecosystem=="Yes") %>% mutate(Mean=mean/1000, Lower=Lower/1000, Upper=Upper/1000)
runApp('dashboard/dashboard.R')
runApp('dashboard/dashboard.R')
selectData2 =
stocks %>% filter(Ecosystem=="Yes", LUC == "BAU", GCM == "CanESM2",  RCP == "rcp45", EcoregionName=="State", StockGroup!="TEC") %>%
filter(Timestep==2001 | Timestep==2100) %>% group_by(LUC,GCM,RCP,EcoregionName,StockGroup) %>% mutate(MeanChange=Mean-lag(Mean), LowerChange=Lower-lag(Lower), UpperChange=Upper-lag(Upper))
selectData2
selectData1 =
stocks %>% filter(Ecosystem=="Yes", LUC == "BAU", GCM == "CanESM2", RCP == "rcp45", EcoregionName=="State", StockGroup=="TEC") %>%
filter(Timestep>=2050, Timestep<=2050)
selectData1
runApp('dashboard/dashboard.R')
? ggplotly
runApp('dashboard/dashboard.R')
runApp('dashboard/dashboard.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('dashboard/dashboard.R')
? selectInput
runApp('dashboard/dashboard.R')
? box
runApp('dashboard/dashboard.R')
? fixedRow
runApp('dashboard/dashboard.R')
runApp('dashboard/dashboard.R')
netFlux
selectData3 =
netFlux %>% filter(LUC =="BAU", GCM=="CanESM2", RCP=="rcp45", EcoregionName=="State", Flux=="NECB") %>%
filter(Timestep>=2001, Timestep<=2100) %>%
mutate(Mean10=rollmean(Mean, 10, fill=NA, align=c("center")), Lower10=rollmean(Lower, 10, fill=NA, align=c("center")), Upper10=rollmean(Upper, 10, fill=NA, align=c("center")))
selectData3
runApp('dashboard/dashboard.R')
selectData3 =
netFlux %>% filter(LUC =="BAU", GCM=="CanESM2", RCP=="rcp45", EcoregionName=="State", Flux=="NECB") %>%
filter(Timestep>=2001, Timestep<=2100) %>% group_by(LUC,GCM,RCP,EcoregionName,Flux) %>% summarise(Mean=mean(Mean), Lower=mean(Lower), Upper=mean(Upper))
selectData3
selectData3 =
netFlux %>% filter(LUC =="BAU", GCM=="CanESM2", RCP=="rcp45", EcoregionName=="State", Flux=="NPP") %>%
filter(Timestep>=2001, Timestep<=2100) %>% group_by(LUC,GCM,RCP,EcoregionName,Flux) %>% summarise(Mean=mean(Mean), Lower=mean(Lower), Upper=mean(Upper))
selectData3
runApp('dashboard/dashboard.R')
runApp('E:/california-carbon-futures/github/lucas-shiny')
runApp()
runApp()
runApp('dashboard/dashboard.R')
runApp('dashboard/dashboard.R')
runApp()
runApp('dashboard/dashboard.R')
runApp()
runApp()
runApp()
install.packages("ggthemr")
runApp()
devtools::install_github('cttobin/ggthemr')
devtools::install_github('cttobin/ggthemr')
ggthemr('earth', type = 'inner')
install.packages("shiny")
install.packages("rlang")
install.packages(c("afex", "backports", "blob", "boot", "broom", "broomExtra", "callr", "car", "class", "classInt", "clipr", "cluster", "coda", "codetools", "coin", "curl", "dbplyr", "deSolve", "DiagrammeR", "digest", "dplyr", "DT", "e1071", "emmeans", "evaluate", "foreign", "ggalluvial", "ggcorrplot", "ggExtra", "ggplot2", "ggrepel", "ggsignif", "ggstatsplot", "ggthemes", "groupedstats", "gstat", "haven", "hexbin", "hms", "httpuv", "httr", "igraph", "insight", "jcolors", "jmvcore", "knitr", "lavaan", "libcoin", "lmtest", "markdown", "MASS", "Matrix", "matrixStats", "metafor", "mgcv", "mime", "modelr", "mvtnorm", "nlme", "numDeriv", "oompaBase", "openssl", "openxlsx", "pbapply", "pillar", "processx", "progress", "quantreg", "qvcalc", "raster", "rasterVis", "rcompanion", "Rcpp", "RcppArmadillo", "reprex", "rgdal", "rgl", "rmarkdown", "robust", "robustbase", "rpart", "RSQLite", "rvest", "servr", "sf", "sjlabelled", "sjmisc", "sjstats", "skimr", "survival", "sys", "tibble", "tidyr", "tigris", "tinytex", "units", "visNetwork", "whisker", "WRS2", "xaringan", "xfun", "XML", "xml2", "zip", "zoo"))
packageVersion("shiny")
